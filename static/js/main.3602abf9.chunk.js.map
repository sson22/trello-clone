{"version":3,"sources":["atoms.tsx","Components/DragabbleCard.tsx","Components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DragabbleCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","required","type","placeholder","droppableId","info","Boolean","draggingFromThisWith","droppableProps","map","Boards","App","useRecoilState","onDragEnd","destination","source","boardCopy","taskObj","splice","sourceBoard","destinationBoard","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3602abf9.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\ninterface IToDoState {\n  [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: \"toDo\",\n  default: {\n    \"To Do\": [],\n    Doing: [],\n    Done: [],\n  },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nconst Card = styled.div<{ isDragging: boolean }>`\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  background-color: ${(props) =>\n    props.isDragging ? \"#e4f2ff\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\n`;\n\ninterface IDragabbleCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction DragabbleCard({ toDoId, toDoText, index }: IDragabbleCardProps) {\n  return (\n    <Draggable draggableId={toDoId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\nexport default React.memo(DragabbleCard);\n","import { useForm } from \"react-hook-form\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport DragabbleCard from \"./DragabbleCard\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport { useSetRecoilState } from \"recoil\";\nconst Wrapper = styled.div`\n  width: 300px;\n  padding-top: 10px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n`;\ninterface IAreaProps {\n  isDraggingFromThis: boolean;\n  isDraggingOver: boolean;\n}\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#dfe6e9\"\n      : props.isDraggingFromThis\n      ? \"#b2bec3\"\n      : \"transparent\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 10px;\n  input {\n    font-size: 16px;\n    border: 0;\n    background-color: white;\n    width: 80%;\n    padding: 10px;\n    border-radius: 5px;\n    text-align: center;\n    margin: 0 auto;\n  }\n`;\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n}\ninterface IForm {\n  toDo: string;\n}\nfunction Board({ toDos, boardId }: IBoardProps) {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    const newToDo = {\n      id: Date.now(),\n      text: toDo,\n    };\n    setToDos((allBoards) => {\n      return {\n        ...allBoards,\n        [boardId]: [newToDo, ...allBoards[boardId]],\n      };\n    });\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <Wrapper>\n      <Title>{boardId}</Title>\n      <Form onSubmit={handleSubmit(onValid)}>\n        <input\n          {...register(\"toDo\", { required: true })}\n          type=\"text\"\n          placeholder={`Add task on ${boardId}`}\n        />\n      </Form>\n      <Droppable droppableId={boardId}>\n        {(magic, info) => (\n          <Area\n            isDraggingOver={info.isDraggingOver}\n            isDraggingFromThis={Boolean(info.draggingFromThisWith)}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            {toDos.map((toDo, index) => (\n              <DragabbleCard\n                key={toDo.id}\n                index={index}\n                toDoId={toDo.id}\n                toDoText={toDo.text}\n              />\n            ))}\n            {magic.placeholder}\n          </Area>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n}\nexport default Board;\n","import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./Components/Board\";\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  gap: 30px;\n`;\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info;\n    if (!destination) return;\n    if (destination?.droppableId === source.droppableId) {\n      // same board movement.\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n    if (destination.droppableId !== source.droppableId) {\n      // cross board movement\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\nimport { createGlobalStyle } from \"styled-components\";\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:#403f3f;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#0079bf\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}